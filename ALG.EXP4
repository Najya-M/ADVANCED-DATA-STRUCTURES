---

### **ALGORITHM**

**Step 1**: Start.

**Step 2**: Define the structure `Node` with three fields:  
   - `data` (integer)  
   - `prev` (pointer to the previous node)  
   - `next` (pointer to the next node).

**Step 3**: Define the function `createNode(int data)` to create a new node with the given data.  
   - Allocate memory for a new node.  
   - Set `data` to the given value.  
   - Set `prev` and `next` to `NULL`.  
   - Return the newly created node.

**Step 4**: Define the function `insertAtBeginning(struct Node* head, int data)` to insert a node at the beginning of the list.  
   - Create a new node with the given data using `createNode()`.  
   - Set the `next` of the new node to the current `head`.  
   - If `head` is not `NULL`, set the `prev` of the current `head` to the new node.  
   - Return the new node as the new `head`.

**Step 5**: Define the function `insertAtEnd(struct Node* head, int data)` to insert a node at the end of the list.  
   - Create a new node with the given data using `createNode()`.  
   - If the list is empty (`head == NULL`), return the new node as the `head`.  
   - Otherwise, traverse the list to find the last node.  
   - Set the `next` of the last node to the new node and the `prev` of the new node to the last node.  
   - Return the unchanged `head`.

**Step 6**: Define the function `insertAfterPosition(struct Node* head, int data, int position)` to insert a node after a specific position.  
   - If `head` is `NULL` or the position is less than 1, print "Position out of range" and return `head`.  
   - Traverse the list to find the node at the specified position.  
   - Create a new node with the given data using `createNode()`.  
   - Insert the new node between the current node and its next node.  
   - Adjust the `next` and `prev` pointers of the neighboring nodes.  
   - Return the unchanged `head`.

**Step 7**: Define the function `deleteAtBeginning(struct Node* head)` to delete a node from the beginning of the list.  
   - If the list is empty (`head == NULL`), print "List is empty" and return `head`.  
   - Save the current `head` in a temporary pointer, move `head` to the next node, and set its `prev` to `NULL`.  
   - Free the memory of the removed node.  
   - Return the updated `head`.

**Step 8**: Define the function `deleteAtEnd(struct Node* head)` to delete a node from the end of the list.  
   - If the list is empty (`head == NULL`), print "List is empty" and return `head`.  
   - Traverse the list to find the last node.  
   - If the list contains only one node, set `head` to `NULL`.  
   - Otherwise, set the `next` of the previous node to `NULL`.  
   - Free the memory of the last node.  
   - Return the updated `head`.

**Step 9**: Define the function `deleteAtPosition(struct Node* head, int position)` to delete a node at a specific position.  
   - If `head` is `NULL` or the position is less than 1, print "Position out of range" and return `head`.  
   - Traverse the list to find the node at the specified position.  
   - Adjust the `next` and `prev` pointers of the neighboring nodes to exclude the node to be deleted.  
   - Free the memory of the removed node.  
   - Return the updated `head`.

**Step 10**: Define the function `displayList(struct Node* head)` to display the elements of the list.  
   - If the list is empty (`head == NULL`), print "List is empty".  
   - Otherwise, traverse the list and print the `data` of each node.  

**Step 11**: In the `main` function, perform the following:  
   - Initialize `head` to `NULL`.  
   - Define a loop to repeatedly display the menu and handle user input.  
   - Print the available operations:  
     - 1. Insert at beginning  
     - 2. Insert at end  
     - 3. Insert after position  
     - 4. Delete at beginning  
     - 5. Delete at end  
     - 6. Delete at position  
     - 7. Display list  
     - 8. Exit  
   - Read the user's choice and perform the corresponding operation using a `switch` statement.  
     - Case 1: Insert at beginning.  
     - Case 2: Insert at end.  
     - Case 3: Insert after position.  
     - Case 4: Delete at beginning.  
     - Case 5: Delete at end.  
     - Case 6: Delete at position.  
     - Case 7: Display the list.  
     - Case 8: Exit the program.  
   - Print "Invalid choice" if the user inputs an invalid option.

**Step 12**: Stop.

---